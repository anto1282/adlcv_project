{"env_info": "sys.platform: linux\nPython: 3.8.19 | packaged by conda-forge | (default, Mar 20 2024, 12:47:35) [GCC 12.3.0]\nCUDA available: True\nGPU 0: NVIDIA A100 80GB PCIe\nCUDA_HOME: /appl/cuda/11.3.0\nNVCC: Cuda compilation tools, release 11.3, V11.3.58\nGCC: gcc (GCC) 12.3.0\nPyTorch: 1.11.0+cu113\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.5.2 (Git Hash a9302535553c73243c632ad3c4c80beec3d19a1e)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX2\n  - CUDA Runtime 11.3\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.2\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.11.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=OFF, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.12.0+cu113\nOpenCV: 4.6.0\nMMCV: 1.5.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.3\nMMSegmentation: 0.29.0+45d03f6", "seed": 1909104303, "exp_name": "vpd_config.py", "mmseg_version": "0.29.0+45d03f6", "config": "norm_cfg = dict(type='SyncBN', requires_grad=True)\nmodel = dict(\n    type='VPDSeg',\n    pretrained='open-mmlab://resnet50_v1c',\n    backbone=dict(\n        type='ResNetV1c',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        dilations=(1, 1, 1, 1),\n        strides=(1, 2, 2, 2),\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        norm_eval=False,\n        style='pytorch',\n        contract_dilation=True),\n    neck=dict(\n        type='FPN',\n        in_channels=[320, 790, 1430, 1280],\n        out_channels=256,\n        num_outs=4),\n    decode_head=dict(\n        type='FPNHead',\n        in_channels=[256, 256, 256, 256],\n        in_index=[0, 1, 2, 3],\n        feature_strides=[4, 8, 16, 32],\n        channels=256,\n        dropout_ratio=0.1,\n        num_classes=150,\n        norm_cfg=dict(type='SyncBN', requires_grad=True),\n        align_corners=False,\n        loss_decode=dict(\n            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),\n    train_cfg=dict(),\n    test_cfg=dict(mode='slide', crop_size=(512, 512), stride=(341, 341)),\n    sd_path='/work3/s203557/checkpoints/v1-5-pruned-emaonly.ckpt',\n    sd_config=\n    '/zhome/b6/d/154958/ADLCV_Project/VPD/segmentation/v1-inference.yaml')\ndataset_type = 'ADE20KDataset'\ndata_root = '/dtu/blackhole/0e/154958/data/ade/ADEChallengeData2016'\nIMG_MEAN = [127.5, 127.5, 127.5]\nIMG_VAR = [127.5, 127.5, 127.5]\nimg_norm_cfg = dict(\n    mean=[127.5, 127.5, 127.5], std=[127.5, 127.5, 127.5], to_rgb=True)\ncrop_size = (512, 512)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', reduce_zero_label=True),\n    dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),\n    dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n    dict(type='RandomFlip', prob=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[127.5, 127.5, 127.5],\n        std=[127.5, 127.5, 127.5],\n        to_rgb=True),\n    dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n    dict(type='GenerateBoundingBoxMasksFromSeg'),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_semantic_seg', 'gt_bbox_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(2048, 512),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[127.5, 127.5, 127.5],\n                std=[127.5, 127.5, 127.5],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=8,\n    train=dict(\n        type='ADE20KDataset',\n        data_root='/dtu/blackhole/0e/154958/data/ade/ADEChallengeData2016',\n        img_dir='images/training',\n        ann_dir='annotations/training',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', reduce_zero_label=True),\n            dict(type='Resize', img_scale=(2048, 512), ratio_range=(0.5, 2.0)),\n            dict(type='RandomCrop', crop_size=(512, 512), cat_max_ratio=0.75),\n            dict(type='RandomFlip', prob=0.5),\n            dict(type='PhotoMetricDistortion'),\n            dict(\n                type='Normalize',\n                mean=[127.5, 127.5, 127.5],\n                std=[127.5, 127.5, 127.5],\n                to_rgb=True),\n            dict(type='Pad', size=(512, 512), pad_val=0, seg_pad_val=255),\n            dict(type='GenerateBoundingBoxMasksFromSeg'),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_semantic_seg', 'gt_bbox_masks'])\n        ]),\n    val=dict(\n        type='ADE20KDataset',\n        data_root='/dtu/blackhole/0e/154958/data/ade/ADEChallengeData2016',\n        img_dir='images/validation',\n        ann_dir='annotations/validation',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[127.5, 127.5, 127.5],\n                        std=[127.5, 127.5, 127.5],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='ADE20KDataset',\n        data_root='/dtu/blackhole/0e/154958/data/ade/ADEChallengeData2016',\n        img_dir='images/validation',\n        ann_dir='annotations/validation',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(2048, 512),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[127.5, 127.5, 127.5],\n                        std=[127.5, 127.5, 127.5],\n                        to_rgb=True),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nlog_config = dict(\n    interval=50, hooks=[dict(type='TextLoggerHook', by_epoch=False)])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/work3/s203557/checkpoints/vpd.chkpt'\nresume_from = None\nworkflow = [('train', 1)]\ncudnn_benchmark = True\nfind_unused_parameters = True\noptimizer = dict(\n    type='AdamW',\n    lr=8e-05,\n    weight_decay=0.001,\n    paramwise_cfg=dict(\n        custom_keys=dict(\n            unet=dict(lr_mult=0.1),\n            encoder_vq=dict(lr_mult=0.0),\n            text_encoder=dict(lr_mult=0.0),\n            norm=dict(decay_mult=0.0))))\noptimizer_config = dict()\nlr_config = dict(\n    policy='poly',\n    power=1,\n    min_lr=0.0,\n    by_epoch=False,\n    warmup='linear',\n    warmup_iters=1500,\n    warmup_ratio=1e-06)\nrunner = dict(type='IterBasedRunner', max_iters=80000)\ncheckpoint_config = dict(by_epoch=False, interval=8000)\nevaluation = dict(interval=8000, metric='mIoU')\nwork_dir = './work_dirs/vpd_config'\ngpu_ids = [0]\nauto_resume = False\ndevice = 'cuda'\nseed = 1909104303\n", "CLASSES": ["wall", "building", "sky", "floor", "tree", "ceiling", "road", "bed ", "windowpane", "grass", "cabinet", "sidewalk", "person", "earth", "door", "table", "mountain", "plant", "curtain", "chair", "car", "water", "painting", "sofa", "shelf", "house", "sea", "mirror", "rug", "field", "armchair", "seat", "fence", "desk", "rock", "wardrobe", "lamp", "bathtub", "railing", "cushion", "base", "box", "column", "signboard", "chest of drawers", "counter", "sand", "sink", "skyscraper", "fireplace", "refrigerator", "grandstand", "path", "stairs", "runway", "case", "pool table", "pillow", "screen door", "stairway", "river", "bridge", "bookcase", "blind", "coffee table", "toilet", "flower", "book", "hill", "bench", "countertop", "stove", "palm", "kitchen island", "computer", "swivel chair", "boat", "bar", "arcade machine", "hovel", "bus", "towel", "light", "truck", "tower", "chandelier", "awning", "streetlight", "booth", "television receiver", "airplane", "dirt track", "apparel", "pole", "land", "bannister", "escalator", "ottoman", "bottle", "buffet", "poster", "stage", "van", "ship", "fountain", "conveyer belt", "canopy", "washer", "plaything", "swimming pool", "stool", "barrel", "basket", "waterfall", "tent", "bag", "minibike", "cradle", "oven", "ball", "food", "step", "tank", "trade name", "microwave", "pot", "animal", "bicycle", "lake", "dishwasher", "screen", "blanket", "sculpture", "hood", "sconce", "vase", "traffic light", "tray", "ashcan", "fan", "pier", "crt screen", "plate", "monitor", "bulletin board", "shower", "radiator", "glass", "clock", "flag"], "PALETTE": [[120, 120, 120], [180, 120, 120], [6, 230, 230], [80, 50, 50], [4, 200, 3], [120, 120, 80], [140, 140, 140], [204, 5, 255], [230, 230, 230], [4, 250, 7], [224, 5, 255], [235, 255, 7], [150, 5, 61], [120, 120, 70], [8, 255, 51], [255, 6, 82], [143, 255, 140], [204, 255, 4], [255, 51, 7], [204, 70, 3], [0, 102, 200], [61, 230, 250], [255, 6, 51], [11, 102, 255], [255, 7, 71], [255, 9, 224], [9, 7, 230], [220, 220, 220], [255, 9, 92], [112, 9, 255], [8, 255, 214], [7, 255, 224], [255, 184, 6], [10, 255, 71], [255, 41, 10], [7, 255, 255], [224, 255, 8], [102, 8, 255], [255, 61, 6], [255, 194, 7], [255, 122, 8], [0, 255, 20], [255, 8, 41], [255, 5, 153], [6, 51, 255], [235, 12, 255], [160, 150, 20], [0, 163, 255], [140, 140, 140], [250, 10, 15], [20, 255, 0], [31, 255, 0], [255, 31, 0], [255, 224, 0], [153, 255, 0], [0, 0, 255], [255, 71, 0], [0, 235, 255], [0, 173, 255], [31, 0, 255], [11, 200, 200], [255, 82, 0], [0, 255, 245], [0, 61, 255], [0, 255, 112], [0, 255, 133], [255, 0, 0], [255, 163, 0], [255, 102, 0], [194, 255, 0], [0, 143, 255], [51, 255, 0], [0, 82, 255], [0, 255, 41], [0, 255, 173], [10, 0, 255], [173, 255, 0], [0, 255, 153], [255, 92, 0], [255, 0, 255], [255, 0, 245], [255, 0, 102], [255, 173, 0], [255, 0, 20], [255, 184, 184], [0, 31, 255], [0, 255, 61], [0, 71, 255], [255, 0, 204], [0, 255, 194], [0, 255, 82], [0, 10, 255], [0, 112, 255], [51, 0, 255], [0, 194, 255], [0, 122, 255], [0, 255, 163], [255, 153, 0], [0, 255, 10], [255, 112, 0], [143, 255, 0], [82, 0, 255], [163, 255, 0], [255, 235, 0], [8, 184, 170], [133, 0, 255], [0, 255, 92], [184, 0, 255], [255, 0, 31], [0, 184, 255], [0, 214, 255], [255, 0, 112], [92, 255, 0], [0, 224, 255], [112, 224, 255], [70, 184, 160], [163, 0, 255], [153, 0, 255], [71, 255, 0], [255, 0, 163], [255, 204, 0], [255, 0, 143], [0, 255, 235], [133, 255, 0], [255, 0, 235], [245, 0, 255], [255, 0, 122], [255, 245, 0], [10, 190, 212], [214, 255, 0], [0, 204, 255], [20, 0, 255], [255, 255, 0], [0, 153, 255], [0, 41, 255], [0, 255, 204], [41, 0, 255], [41, 255, 0], [173, 0, 255], [0, 245, 255], [71, 0, 255], [122, 0, 255], [0, 255, 184], [0, 92, 255], [184, 255, 0], [0, 133, 255], [255, 214, 0], [25, 194, 194], [102, 255, 0], [92, 0, 255]]}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.0, "memory": 74427, "data_time": 0.0123, "decode.loss_ce": 3.42116, "decode.acc_seg": 24.4132, "loss": 3.42116, "time": 0.96217}
{"mode": "train", "epoch": 1, "iter": 100, "lr": 1e-05, "memory": 74427, "data_time": 0.00714, "decode.loss_ce": 3.18213, "decode.acc_seg": 28.00529, "loss": 3.18213, "time": 0.48478}
{"mode": "train", "epoch": 1, "iter": 150, "lr": 1e-05, "memory": 74427, "data_time": 0.00654, "decode.loss_ce": 3.1223, "decode.acc_seg": 27.96544, "loss": 3.1223, "time": 0.48335}
{"mode": "train", "epoch": 1, "iter": 200, "lr": 1e-05, "memory": 74427, "data_time": 0.00656, "decode.loss_ce": 2.87059, "decode.acc_seg": 30.52951, "loss": 2.87059, "time": 0.48503}
{"mode": "train", "epoch": 1, "iter": 250, "lr": 1e-05, "memory": 74427, "data_time": 0.00659, "decode.loss_ce": 2.94338, "decode.acc_seg": 28.52323, "loss": 2.94338, "time": 0.48567}
{"mode": "train", "epoch": 1, "iter": 300, "lr": 2e-05, "memory": 74427, "data_time": 0.00661, "decode.loss_ce": 3.22128, "decode.acc_seg": 29.98629, "loss": 3.22128, "time": 0.48558}
{"mode": "train", "epoch": 1, "iter": 350, "lr": 2e-05, "memory": 74427, "data_time": 0.00722, "decode.loss_ce": 2.67301, "decode.acc_seg": 33.70914, "loss": 2.67301, "time": 0.48926}
{"mode": "train", "epoch": 1, "iter": 400, "lr": 2e-05, "memory": 74427, "data_time": 0.00851, "decode.loss_ce": 2.77792, "decode.acc_seg": 30.13805, "loss": 2.77792, "time": 0.4962}
{"mode": "train", "epoch": 1, "iter": 450, "lr": 2e-05, "memory": 74427, "data_time": 0.0083, "decode.loss_ce": 2.32719, "decode.acc_seg": 36.85253, "loss": 2.32719, "time": 0.49594}
{"mode": "train", "epoch": 1, "iter": 500, "lr": 3e-05, "memory": 74427, "data_time": 0.00828, "decode.loss_ce": 2.66821, "decode.acc_seg": 32.72093, "loss": 2.66821, "time": 0.49617}
{"mode": "train", "epoch": 1, "iter": 550, "lr": 3e-05, "memory": 74427, "data_time": 0.00835, "decode.loss_ce": 2.30174, "decode.acc_seg": 38.24364, "loss": 2.30174, "time": 0.49535}
{"mode": "train", "epoch": 1, "iter": 600, "lr": 3e-05, "memory": 74427, "data_time": 0.00729, "decode.loss_ce": 2.44932, "decode.acc_seg": 36.97799, "loss": 2.44932, "time": 0.48915}
{"mode": "train", "epoch": 1, "iter": 650, "lr": 3e-05, "memory": 74427, "data_time": 0.00662, "decode.loss_ce": 2.12381, "decode.acc_seg": 40.65895, "loss": 2.12381, "time": 0.48578}
{"mode": "train", "epoch": 1, "iter": 700, "lr": 4e-05, "memory": 74427, "data_time": 0.00664, "decode.loss_ce": 2.28549, "decode.acc_seg": 41.44706, "loss": 2.28549, "time": 0.48634}
{"mode": "train", "epoch": 1, "iter": 750, "lr": 4e-05, "memory": 74427, "data_time": 0.00664, "decode.loss_ce": 2.11584, "decode.acc_seg": 45.95239, "loss": 2.11584, "time": 0.48661}
{"mode": "train", "epoch": 1, "iter": 800, "lr": 4e-05, "memory": 74427, "data_time": 0.00662, "decode.loss_ce": 2.01451, "decode.acc_seg": 45.01014, "loss": 2.01451, "time": 0.48649}
{"mode": "train", "epoch": 1, "iter": 850, "lr": 4e-05, "memory": 74427, "data_time": 0.00666, "decode.loss_ce": 1.65839, "decode.acc_seg": 52.6884, "loss": 1.65839, "time": 0.48653}
{"mode": "train", "epoch": 1, "iter": 900, "lr": 5e-05, "memory": 74427, "data_time": 0.00663, "decode.loss_ce": 1.7747, "decode.acc_seg": 51.51399, "loss": 1.7747, "time": 0.48624}
{"mode": "train", "epoch": 1, "iter": 950, "lr": 5e-05, "memory": 74427, "data_time": 0.00669, "decode.loss_ce": 1.73753, "decode.acc_seg": 55.30545, "loss": 1.73753, "time": 0.48614}
{"mode": "train", "epoch": 1, "iter": 1000, "lr": 5e-05, "memory": 74427, "data_time": 0.00665, "decode.loss_ce": 1.9231, "decode.acc_seg": 49.14535, "loss": 1.9231, "time": 0.48598}
{"mode": "train", "epoch": 1, "iter": 1050, "lr": 6e-05, "memory": 74427, "data_time": 0.00668, "decode.loss_ce": 1.76459, "decode.acc_seg": 51.46955, "loss": 1.76459, "time": 0.48525}
{"mode": "train", "epoch": 1, "iter": 1100, "lr": 6e-05, "memory": 74427, "data_time": 0.00666, "decode.loss_ce": 1.65215, "decode.acc_seg": 53.31138, "loss": 1.65215, "time": 0.48529}
{"mode": "train", "epoch": 1, "iter": 1150, "lr": 6e-05, "memory": 74427, "data_time": 0.00669, "decode.loss_ce": 1.54326, "decode.acc_seg": 56.79386, "loss": 1.54326, "time": 0.48575}
{"mode": "train", "epoch": 1, "iter": 1200, "lr": 6e-05, "memory": 74427, "data_time": 0.00667, "decode.loss_ce": 1.57999, "decode.acc_seg": 55.48757, "loss": 1.57999, "time": 0.48519}
{"mode": "train", "epoch": 1, "iter": 1250, "lr": 7e-05, "memory": 74427, "data_time": 0.00677, "decode.loss_ce": 1.2726, "decode.acc_seg": 60.48265, "loss": 1.2726, "time": 0.48617}
{"mode": "train", "epoch": 1, "iter": 1300, "lr": 7e-05, "memory": 74427, "data_time": 0.0067, "decode.loss_ce": 1.39866, "decode.acc_seg": 60.44078, "loss": 1.39866, "time": 0.48633}
{"mode": "train", "epoch": 1, "iter": 1350, "lr": 7e-05, "memory": 74427, "data_time": 0.00671, "decode.loss_ce": 1.45597, "decode.acc_seg": 54.44036, "loss": 1.45597, "time": 0.48647}
{"mode": "train", "epoch": 1, "iter": 1400, "lr": 7e-05, "memory": 74427, "data_time": 0.00669, "decode.loss_ce": 1.39181, "decode.acc_seg": 59.66125, "loss": 1.39181, "time": 0.48628}
{"mode": "train", "epoch": 1, "iter": 1450, "lr": 8e-05, "memory": 74427, "data_time": 0.00666, "decode.loss_ce": 1.22479, "decode.acc_seg": 63.06977, "loss": 1.22479, "time": 0.48601}
{"mode": "train", "epoch": 1, "iter": 1500, "lr": 8e-05, "memory": 74427, "data_time": 0.00667, "decode.loss_ce": 1.11942, "decode.acc_seg": 63.42432, "loss": 1.11942, "time": 0.48551}
{"mode": "train", "epoch": 1, "iter": 1550, "lr": 8e-05, "memory": 74427, "data_time": 0.00654, "decode.loss_ce": 1.33079, "decode.acc_seg": 60.33361, "loss": 1.33079, "time": 0.48513}
{"mode": "train", "epoch": 1, "iter": 1600, "lr": 8e-05, "memory": 74427, "data_time": 0.00658, "decode.loss_ce": 1.1899, "decode.acc_seg": 62.48767, "loss": 1.1899, "time": 0.48508}
{"mode": "train", "epoch": 1, "iter": 1650, "lr": 8e-05, "memory": 74427, "data_time": 0.00666, "decode.loss_ce": 0.86084, "decode.acc_seg": 72.35688, "loss": 0.86084, "time": 0.48419}
{"mode": "train", "epoch": 1, "iter": 1700, "lr": 8e-05, "memory": 74427, "data_time": 0.00678, "decode.loss_ce": 1.02344, "decode.acc_seg": 66.22609, "loss": 1.02344, "time": 0.48506}
{"mode": "train", "epoch": 1, "iter": 1750, "lr": 8e-05, "memory": 74427, "data_time": 0.00679, "decode.loss_ce": 0.93833, "decode.acc_seg": 70.5668, "loss": 0.93833, "time": 0.48467}
{"mode": "train", "epoch": 1, "iter": 1800, "lr": 8e-05, "memory": 74427, "data_time": 0.00677, "decode.loss_ce": 1.29201, "decode.acc_seg": 61.19322, "loss": 1.29201, "time": 0.48474}
